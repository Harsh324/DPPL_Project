#include <bits/stdc++.h>
#include "Big_int.h"

using namespace Lib;
using namespace std;

int main(int argc, char const *argv[])
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    // Importing Big_Int Class from ".h" file to create object
    Big_int Big;

    // Big Integers Addition Testcases:
    cout << "\nAddition of two Big Int numbers:\n\n";
    {
        Big.Add("0", "0");                                                  // 1
        Big.Add("1", "9");                                                  // 2
        Big.Add("10", "100");                                               // 3
        Big.Add("101", "1009");                                             // 4
        Big.Add("111", "99999");                                            // 5
        Big.Add("12345", "987650");                                         // 6
        Big.Add("99999", "1234561");                                        // 7
        Big.Add("0000009", "1111111");                                      // 8
        Big.Add("123456789", "9876543210");                                 // 9
        Big.Add("9999999999", "10000000000");                               // 10
        Big.Add("100000012345", "98765000001");                             // 11
        Big.Add("91929394959697", "10101010101010");                        // 12
        Big.Add("1020304050607080", "12003400560078009");                   // 13
        Big.Add("91929394959697989909", "10111213141516171819");            // 14
        Big.Add("0123456789876543210", "9080706050403020101234567890");     // 15
        Big.Add("10000000000000000000000000009", "1000000000000000000001"); // 16
        Big.Add("567894321098765432112345678090", "043215678901234567890"); // 17
        Big.Add("1000000000000000000000000000000001", "99999999999999999"); // 18
        Big.Add("11111111111111111111111111111111111111", "0000000000009"); // 19
        Big.Add("00000000000000000000000000000000000000001", "0000000009"); // 20
        Big.Add("99999999999999999999999999999999999999999999", "1000001"); // 21
    }

    cout << "\nSubtraction of two Big Int numbers:\n\n";
    // Big Integers Subtraction Testcases:
    {
        Big.Sub("0", "0");                                                  // 1
        Big.Sub("1", "9");                                                  // 2
        Big.Sub("10", "100");                                               // 3
        Big.Sub("101", "1009");                                             // 4
        Big.Sub("111", "99999");                                            // 5
        Big.Sub("12345", "987650");                                         // 6
        Big.Sub("99999", "1234561");                                        // 7
        Big.Sub("0000009", "1111111");                                      // 8
        Big.Sub("123456789", "9876543210");                                 // 9
        Big.Sub("9999999999", "10000000000");                               // 10
        Big.Sub("100000012345", "98765000001");                             // 11
        Big.Sub("91929394959697", "10101010101010");                        // 12
        Big.Sub("1020304050607080", "12003400560078009");                   // 13
        Big.Sub("91929394959697989909", "10111213141516171819");            // 14
        Big.Sub("0123456789876543210", "9080706050403020101234567890");     // 15
        Big.Sub("10000000000000000000000000009", "1000000000000000000001"); // 16
        Big.Sub("567894321098765432112345678090", "043215678901234567890"); // 17
        Big.Sub("1000000000000000000000000000000001", "99999999999999999"); // 18
        Big.Sub("11111111111111111111111111111111111111", "0000000000009"); // 19
        Big.Sub("00000000000000000000000000000000000000001", "0000000009"); // 20
        Big.Sub("99999999999999999999999999999999999999999999", "1000001"); // 21
    }

    return 0;
}